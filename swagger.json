{
  "openapi": "3.0.0",
  "info": {
    "title": "Sensor Orchestrator",
    "description": "Configuration management and sensor orchestration service <br> <br> <a href=\"https://api.analytics.accedian.io/session.html#section/Quick-setup/Authenticate-to-obtain-an-Authorized-Token\">How to Authenticate</a>\n",
    "version": "2023.11"
  },
  "tags": [
    {
      "name": "v3"
    }
  ],
  "paths": {
    "/api/orchestrate/v3/agents": {
      "get": {
        "summary": "Retrieve all agent documents. This is not the agent configuration, it the document that contain agent status and information received from agents. The agent configuration is created separately.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No agent configurations are provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Page number - zero counting",
          "schema": {
            "type": "integer",
            "default": 0
          }
        },
        {
          "name": "limit",
          "in": "query",
          "required": false,
          "description": "Page size",
          "schema": {
            "type": "integer",
            "default": 1000
          }
        },
        {
          "name": "match",
          "in": "query",
          "required": false,
          "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
          "schema": {
            "type": "string",
            "default": ""
          }
        },
        {
          "name": "sort",
          "in": "query",
          "required": false,
          "description": "Sort on id, agentType, or agentName. Examples: \n  * sort[column]=id&sort[dir]=desc\n  * sort[column]=agentType&sort[dir]=asc\n  * sort[column]=agentName&sort[dir]=desc\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "agentType"
              },
              "dir": {
                "type": "string",
                "example": "desc"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        },
        {
          "name": "filter",
          "in": "query",
          "required": false,
          "description": "Filter on id, agentName, agentType or metadata. Examples:\n  * filter[column]=id&filter[value]=myAgentId\n  * filter[column]=agentType&filter[value]=actuate\n  * filter[column]=agentName&filter[value]=myAgentName\n  * filter[column]=metadata.LOCATION&filter[value]=Montreal\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "agentType"
              },
              "value": {
                "type": "string",
                "example": "actuate"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        }
      ]
    },
    "/api/orchestrate/v3/agents/{agentId}": {
      "parameters": [
        {
          "name": "agentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an agent by agentId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched agent document for given agentId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an agent specified by the provided agentId. This will not delete the agent configuration, it will remove agent status.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted agent with given agentId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/configuration": {
      "post": {
        "summary": "Create an agent configuration",
        "tags": [
          "AgentServiceV3",
          "AgentServiceV3"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentConfigCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent configuration create request successfully processed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "The Connector being provisioned already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve all agent configurations",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentConfigListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No agent configurations are provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number - zero counting",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Page size",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "match",
            "in": "query",
            "required": false,
            "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sort on id or agentName. Examples: \n  * sort[column]=id&sort[dir]=desc\n  * sort[column]=agentName&sort[dir]=desc\n",
            "schema": {
              "type": "object",
              "properties": {
                "column": {
                  "type": "string",
                  "example": "agentName"
                },
                "dir": {
                  "type": "string",
                  "example": "desc"
                }
              }
            },
            "style": "deepObject",
            "explode": true
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "description": "Filter on id, agentName, or metadata. Examples:\n  * filter[column]=id&filter[value]=myAgentId\n  * filter[column]=agentName&filter[value]=myAgentName\n  * filter[column]=metadata.LOCATION&filter[value]=Montreal\n",
            "schema": {
              "type": "object",
              "properties": {
                "column": {
                  "type": "string",
                  "example": "agentType"
                },
                "value": {
                  "type": "string",
                  "example": "actuate"
                }
              }
            },
            "style": "deepObject",
            "explode": true
          }
        ]
      }
    },
    "/api/orchestrate/v3/agents/techreport/{agentId}": {
      "parameters": [
        {
          "name": "agentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Download a techSupport log bz2",
        "tags": [
          "AgentServiceV3"
        ],
        "operationId": "DownloadTechSupport",
        "responses": {
          "200": {
            "description": "download techSupport log bz2",
            "headers": {
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "default": "attachment; filename=techSupport.bz2;"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "default": "application/octet-stream"
                }
              }
            },
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/configuration/{agentId}": {
      "parameters": [
        {
          "name": "agentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an agent configuration by agentId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched configuration for given agentId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentConfigResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an agent configuration specified by the provided agentId.",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentConfigUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated agent configuration for given agentId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentConfigResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Incorrect revision number passed in to the agent configuration being updated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an agent configuration specified by the provided agentId. This will also remove the agent document containing status.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted agent configuration for given agentId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentConfigResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/{agentId}/command": {
      "parameters": [
        {
          "name": "agentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Sends a given command to be run for the agent specified by agentId",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentCommandRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Run agent command request successfully processed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentCommandResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/sessions": {
      "get": {
        "summary": "Retrieve all sessions",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No sessions are provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number - zero counting",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Page size",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "match",
            "in": "query",
            "required": false,
            "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sort on id, sessionType, sessionName, schedule or period. Examples: \n  * sort[column]=id&sort[dir]=desc\n  * sort[column]=sessionType&sort[dir]=asc\n  * sort[column]=sessionName&sort[dir]=desc\n  * sort[column]=period&sort[dir]=desc\n  * sort[column]=schedule&sort[dir]=desc\n",
            "schema": {
              "type": "object",
              "properties": {
                "column": {
                  "type": "string",
                  "example": "agentType"
                },
                "dir": {
                  "type": "string",
                  "example": "desc"
                }
              }
            },
            "style": "deepObject",
            "explode": true
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "description": "Filter on id, sessionType, sessionName, period, schedule or metadata. Examples:\n  * filter[column]=id&filter[value]=mySessionId\n  * filter[column]=sessionType&filter[value]=twamp-stateless\n  * filter[column]=sessionName&filter[value]=mySessionName\n  * filter[column]=period&filter[value]=continuous\n  * filter[column]=schedule&filter[value]=myScheduleId\n  * filter[column]=metadata.LOCATION&filter[value]=Montreal\n",
            "schema": {
              "type": "object",
              "properties": {
                "column": {
                  "type": "string",
                  "example": "sessionType"
                },
                "value": {
                  "type": "string",
                  "example": "trace"
                }
              }
            },
            "style": "deepObject",
            "explode": true
          }
        ]
      },
      "post": {
        "summary": "Create agent sessions",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentSessionListCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent sessions create request successfully processed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionListResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/session": {
      "post": {
        "summary": "Create an agent session",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentSessionCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent session create request successfully processed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an agent session.",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentSessionUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated agent session",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Incorrect revision number passed in for session being updated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/session/{sessionId}": {
      "parameters": [
        {
          "name": "sessionId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an agent session by sessionId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched sessions for given sessionId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified session is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an agent session by sessionId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted agent configuration with given sessionId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified session is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/sessions/{agentId}": {
      "parameters": [
        {
          "name": "agentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        },
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Page number - zero counting",
          "schema": {
            "type": "integer",
            "default": 0
          }
        },
        {
          "name": "limit",
          "in": "query",
          "required": false,
          "description": "Page size",
          "schema": {
            "type": "integer",
            "default": 1000
          }
        },
        {
          "name": "match",
          "in": "query",
          "required": false,
          "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
          "schema": {
            "type": "string",
            "default": ""
          }
        },
        {
          "name": "sort",
          "in": "query",
          "required": false,
          "description": "Sort on id, sessionType, sessionName, scheduleReference  or period. Examples: \n  * sort[column]=id&sort[dir]=desc\n  * sort[column]=sessionType&sort[dir]=asc\n  * sort[column]=sessionName&sort[dir]=desc\n  * sort[column]=period&sort[dir]=desc\n  * sort[column]=scheduleReference&sort[dir]=desc\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "sessionName"
              },
              "dir": {
                "type": "string",
                "example": "desc"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        },
        {
          "name": "filter",
          "in": "query",
          "required": false,
          "description": "Filter on id, sessionType, sessionName, period, scheduleReference or metadata. Examples:\n  * filter[column]=id&filter[value]=mySessionId\n  * filter[column]=sessionType&filter[value]=twamp-stateless\n  * filter[column]=sessionName&filter[value]=mySessionName\n  * filter[column]=period&filter[value]=continuous\n  * filter[column]=scheduleReference&filter[value]=myScheduleName\n  * filter[column]=metadata.LOCATION&filter[value]=Montreal\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "sessionType"
              },
              "value": {
                "type": "string",
                "example": "trace"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        }
      ],
      "get": {
        "summary": "Retrieve agent sessions by agentId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched sessions for given agentId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete all sessions for the provided agentId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted sessions for given agentId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/sessionstatuses": {
      "get": {
        "summary": "Retrieve all session's status",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSessionStatusListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No sessions are provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Page number - zero counting",
          "schema": {
            "type": "integer",
            "default": 0
          }
        },
        {
          "name": "limit",
          "in": "query",
          "required": false,
          "description": "Page size",
          "schema": {
            "type": "integer",
            "default": 1000
          }
        },
        {
          "name": "match",
          "in": "query",
          "required": false,
          "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
          "schema": {
            "type": "string",
            "default": ""
          }
        },
        {
          "name": "sort",
          "in": "query",
          "required": false,
          "description": "Sort on id, sessionType, sessionName, scheduleReference  or period. Examples: \n  * sort[column]=id&sort[dir]=desc\n  * sort[column]=sessionType&sort[dir]=asc\n  * sort[column]=sessionName&sort[dir]=desc\n  * sort[column]=period&sort[dir]=desc\n  * sort[column]=scheduleReference&sort[dir]=desc\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "agentType"
              },
              "dir": {
                "type": "string",
                "example": "desc"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        },
        {
          "name": "filter",
          "in": "query",
          "required": false,
          "description": "Filter on id, sessionType, sessionName, period, scheduleReference  or metadata. Examples:\n  * filter[column]=id&filter[value]=mySessionId\n  * filter[column]=sessionType&filter[value]=twamp-stateless\n  * filter[column]=sessionName&filter[value]=mySessionName\n  * filter[column]=period&filter[value]=continuous\n  * filter[column]=scheduleReference&filter[value]=theScheduleName          \n  * filter[column]=metadata.LOCATION&filter[value]=Montreal\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "sessionType"
              },
              "value": {
                "type": "string",
                "example": "trace"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        }
      ]
    },
    "/api/orchestrate/v3/agents/sessionstatus/{sessionId}": {
      "parameters": [
        {
          "name": "sessionId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves the session status for session with sessionId",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Session Status successfully retrieved",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/SessionStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified session is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/reflectorstatus/{reflectorId}": {
      "parameters": [
        {
          "name": "reflectorId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves the reflector status for reflector with reflectorId",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Reflector Status successfully retrieved",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ReflectorStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified reflector is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/{agentId}/secrets": {
      "parameters": [
        {
          "name": "agentId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "post": {
        "summary": "Generates and returns the agent secrets required to start an agent",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Secrets successfully generated",
            "content": {
              "text/yaml": {
                "schema": {
                  "$ref": "#/components/schemas/AgentSecrets"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/api-key": {
      "post": {
        "summary": "Generates and returns an api-key for use for agent bootstrapping",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Api-key successfully generated",
            "content": {
              "text/yaml": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/schemas": {
      "post": {
        "summary": "Create a new schema",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionSchemaCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "The extension schema create request successfully processed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "An Extension schema with given name already exists",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "Retrieve all schema extensions",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionSchemaListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No schema extensions are provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "page",
            "in": "query",
            "required": false,
            "description": "Page number - zero counting",
            "schema": {
              "type": "integer",
              "default": 0
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "description": "Page size",
            "schema": {
              "type": "integer",
              "default": 1000
            }
          },
          {
            "name": "match",
            "in": "query",
            "required": false,
            "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
            "schema": {
              "type": "string",
              "default": ""
            }
          },
          {
            "name": "sort",
            "in": "query",
            "required": false,
            "description": "Sort on id or name. Examples:\n  * sort[column]=name&sort[dir]=asc\n  * sort[column]=name&sort[dir]=desc\n",
            "schema": {
              "type": "object",
              "properties": {
                "column": {
                  "type": "string",
                  "example": "name"
                },
                "dir": {
                  "type": "string",
                  "example": "desc"
                }
              }
            },
            "style": "deepObject",
            "explode": true
          },
          {
            "name": "filter",
            "in": "query",
            "required": false,
            "description": "Filter on name or id. Examples:\n  * filter[column]=name&filter[value]=mySchemaId\n  * filter[column]=name&filter[value]=mySchemaName\n",
            "schema": {
              "type": "object",
              "properties": {
                "column": {
                  "type": "string",
                  "example": "agentType"
                },
                "value": {
                  "type": "string",
                  "example": "actuate"
                }
              }
            },
            "style": "deepObject",
            "explode": true
          }
        ]
      }
    },
    "/api/orchestrate/v3/schemas/{schemaId}": {
      "parameters": [
        {
          "name": "schemaId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieve an extension schema by schemaId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched extension schema document for given schemaId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionSchemaResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified extension schema is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update an extension schema specified by the provided schemaId.",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/ExtensionSchemaUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated extension schema for given schemaId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified extension schema is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Incorrect revision number passed in to the extension schema being updated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete an extension schema specified by the provided schemaId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted extension schema with given schemaId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ExtensionSchemaResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified extension schema is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/schemas/running": {
      "get": {
        "summary": "Retrieves the running extension schema for tenant",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Running extension schema successfully retrieved",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/RunningSchemaResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/metadata/search": {
      "get": {
        "summary": "Retrieve all agent configurations, agents, and sessions matching metadata search keys",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MetadataSearchResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Page number - zero counting",
          "schema": {
            "type": "integer",
            "default": 0
          }
        },
        {
          "name": "limit",
          "in": "query",
          "required": false,
          "description": "Page size",
          "schema": {
            "type": "integer",
            "default": 1000
          }
        },
        {
          "name": "match",
          "in": "query",
          "required": false,
          "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
          "schema": {
            "type": "string",
            "default": ""
          }
        },
        {
          "name": "filter",
          "in": "query",
          "required": false,
          "description": "Filter on metadata. Examples:\n  * filter[column]=metadata.LOCATION&filter[value]=Montreal\n  * filter[column]=metadata.ORG&filter[value]=Sprint\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "metadata.LOCATION"
              },
              "value": {
                "type": "string",
                "example": "Montreal"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        }
      ]
    },
    "/api/orchestrate/v3/agents/schedule": {
      "post": {
        "summary": "Create a schedule",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentScheduleCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Agent schedule create request successfully processed",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "put": {
        "summary": "Update a schedule",
        "tags": [
          "AgentServiceV3"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/AgentScheduleUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully updated agent schedule",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentScheduleResponse"
                }
              }
            }
          },
          "400": {
            "description": "Request data does not pass validation",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified agent schedule configuration is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "409": {
            "description": "Incorrect revision number passed in for schedule being updated",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/schedule/{scheduleId}": {
      "parameters": [
        {
          "name": "scheduleId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves schedule by scheduleId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully fetched schedule for given sessionId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentScheduleResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified schedule is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Delete a schedule by scheduleId.",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Successfully deleted schedule configuration with given scheduleId",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentScheduleResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified schedule is not provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/schedules": {
      "get": {
        "summary": "Retrieve all schedules",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentScheduleListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No schedules are provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Page number - zero counting",
          "schema": {
            "type": "integer",
            "default": 0
          }
        },
        {
          "name": "limit",
          "in": "query",
          "required": false,
          "description": "Page size",
          "schema": {
            "type": "integer",
            "default": 1000
          }
        },
        {
          "name": "match",
          "in": "query",
          "required": false,
          "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
          "schema": {
            "type": "string",
            "default": ""
          }
        },
        {
          "name": "sort",
          "in": "query",
          "required": false,
          "description": "Sort on id or scheduleName. Examples: \n  * sort[column]=id&sort[dir]=desc\n  * sort[column]=scheduleName&sort[dir]=desc\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "scheduleName"
              },
              "dir": {
                "type": "string",
                "example": "desc"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        },
        {
          "name": "filter",
          "in": "query",
          "required": false,
          "description": "Filter on id, single or scheduleName. Examples:\n  * filter[column]=id&filter[value]=myScheduleId\n  * filter[column]=single&filter[value]=true\n  * filter[column]=scheduleName&filter[value]=myScheduleName\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "scheduleName"
              },
              "value": {
                "type": "string",
                "example": "myScheduleName"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        }
      ]
    },
    "/api/orchestrate/v3/agents/scheduleUsages": {
      "get": {
        "summary": "Retrieve all schedules usage",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/AgentScheduleUsageListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "No schedules are provisioned",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "parameters": [
        {
          "name": "page",
          "in": "query",
          "required": false,
          "description": "Page number - zero counting",
          "schema": {
            "type": "integer",
            "default": 0
          }
        },
        {
          "name": "limit",
          "in": "query",
          "required": false,
          "description": "Page size",
          "schema": {
            "type": "integer",
            "default": 1000
          }
        },
        {
          "name": "match",
          "in": "query",
          "required": false,
          "description": "Match strategy for filter. Supported matches: \n  * match=exact - Performs an exact match\n  * match=regex - Performs a regex search (https://www.erlang.org/doc/man/re.html)\n  * match=&emsp;&emsp;&nbsp;&nbsp; - Default behaviour. Either exact or 'contains' match, depending on the filtered column.\n",
          "schema": {
            "type": "string",
            "default": ""
          }
        },
        {
          "name": "sort",
          "in": "query",
          "required": false,
          "description": "Sort on id or scheduleName. Examples: \n  * sort[column]=id&sort[dir]=desc\n  * sort[column]=scheduleName&sort[dir]=desc\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "scheduleName"
              },
              "dir": {
                "type": "string",
                "example": "desc"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        },
        {
          "name": "filter",
          "in": "query",
          "required": false,
          "description": "Filter on id, single or scheduleName. Examples:\n  * filter[column]=id&filter[value]=myScheduleId\n  * filter[column]=single&filter[value]=true\n  * filter[column]=scheduleName&filter[value]=myScheduleName\n",
          "schema": {
            "type": "object",
            "properties": {
              "column": {
                "type": "string",
                "example": "scheduleName"
              },
              "value": {
                "type": "string",
                "example": "myScheduleName"
              }
            }
          },
          "style": "deepObject",
          "explode": true
        }
      ]
    },
    "/api/orchestrate/v3/agents/schedulestatus/{sessionId}": {
      "parameters": [
        {
          "name": "sessionId",
          "in": "path",
          "required": true,
          "schema": {
            "type": "string"
          }
        }
      ],
      "get": {
        "summary": "Retrieves the schedule status for session with sessionId",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Schedule Status successfully retrieved",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleStatusResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified session is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "/api/orchestrate/v3/agents/schedulestatusagg": {
      "get": {
        "summary": "Retrieves aggregate info of the schedule status",
        "tags": [
          "AgentServiceV3"
        ],
        "responses": {
          "200": {
            "description": "Schedule Aggregate Status successfully retrieved",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/ScheduleStatusAggregateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Invalid payload provided",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "403": {
            "description": "Requestor does not have authorization to perform this action",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "404": {
            "description": "The specified session is not found",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error processing request",
            "content": {
              "text/plain": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AgentUpdateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to update an existing agent",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agents"
                ]
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "_rev": {
                    "type": "string",
                    "description": "Value used to ensure updates to this object are handled in order."
                  },
                  "agentName": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/AgentMetadata"
                  }
                }
              }
            }
          }
        }
      },
      "AgentCreateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to create an agent",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agents"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "agentName": {
                    "type": "string"
                  },
                  "type": {
                    "type": "string"
                  },
                  "version": {
                    "type": "string"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/AgentMetadata"
                  }
                }
              }
            }
          }
        }
      },
      "AgentListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Agent"
            }
          }
        }
      },
      "AgentResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/Agent"
          }
        }
      },
      "AgentConfigUpdateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to update an existing agent configuration",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agentConfigs"
                ]
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "_rev": {
                    "type": "string",
                    "description": "Value used to ensure updates to this object are handled in order."
                  },
                  "agentId": {
                    "type": "string"
                  },
                  "dataGateway": {
                    "$ref": "#/components/schemas/dataGatewayConfig"
                  },
                  "reporting": {
                    "$ref": "#/components/schemas/reporting"
                  },
                  "reflector": {
                    "$ref": "#/components/schemas/agentReflectors"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/AgentMetadata"
                  },
                  "identification": {
                    "$ref": "#/components/schemas/AgentConfigIdentification"
                  }
                }
              }
            }
          }
        }
      },
      "AgentConfigCreateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to create an agent configuration",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agentConfigs"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "agentId": {
                    "type": "string"
                  },
                  "dataGateway": {
                    "$ref": "#/components/schemas/dataGatewayConfig"
                  },
                  "reporting": {
                    "$ref": "#/components/schemas/reporting"
                  },
                  "reflector": {
                    "$ref": "#/components/schemas/agentReflectors"
                  },
                  "metadata": {
                    "$ref": "#/components/schemas/AgentMetadata"
                  },
                  "identification": {
                    "$ref": "#/components/schemas/AgentConfigIdentification"
                  }
                }
              }
            }
          }
        }
      },
      "AgentConfigListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentConfig"
            }
          }
        }
      },
      "AgentConfigResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentConfig"
          }
        }
      },
      "AgentCommand": {
        "description": "Execute a command on the agent.",
        "type": "object",
        "required": [
          "command"
        ],
        "properties": {
          "requestId": {
            "$ref": "#/components/schemas/requestId"
          },
          "command": {
            "$ref": "#/components/schemas/command"
          },
          "args": {
            "type": "array",
            "items": {
              "type": "object",
              "description": "List of arguments, dependent on the test.  Execute the command on a test or on a session. Use appropriate argument.",
              "properties": {
                "type": {
                  "$ref": "#/components/schemas/commandType"
                },
                "sessionId": {
                  "$ref": "#/components/schemas/sessionId"
                },
                "overrides": {
                  "$ref": "#/components/schemas/override"
                },
                "populateFields": {
                  "type": "array",
                  "items": {
                    "type": "string",
                    "enum": [
                      "networkMtuBytes",
                      "networkBottleneckBandwidthBitsPerSec",
                      "networkRttMs"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "AgentCommandRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to create a command for the agent to run",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agentCommands"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/AgentCommand"
              }
            }
          }
        }
      },
      "AgentConfigIdentification": {
        "type": "object",
        "description": "Identification Information",
        "properties": {
          "agentName": {
            "type": "string"
          }
        }
      },
      "AgentSecrets": {
        "type": "object",
        "description": "Secrets required to start an agent",
        "required": [
          "agentConfig"
        ],
        "properties": {
          "agentConfig": {
            "type": "object",
            "required": [
              "identification"
            ],
            "properties": {
              "identification": {
                "type": "object",
                "properties": {
                  "agentId": {
                    "type": "string",
                    "format": "uuid",
                    "description": "UUID of the agent"
                  },
                  "authenticationToken": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "Agent": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agents"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "_rev": {
                "type": "string",
                "description": "Value used to ensure updates to this object are handled in order."
              },
              "agentId": {
                "type": "string"
              },
              "agentName": {
                "type": "string"
              },
              "status": {
                "type": "string"
              },
              "agentType": {
                "type": "string"
              },
              "state": {
                "type": "string"
              },
              "version": {
                "type": "string"
              },
              "hostOsVersion": {
                "type": "string"
              },
              "lastReceivedMessage": {
                "type": "string"
              },
              "lastTechSupportFile": {
                "type": "string"
              },
              "metadata": {
                "$ref": "#/components/schemas/AgentMetadata"
              },
              "agentConfigRevision": {
                "type": "string"
              },
              "agentConfigRevisionAck": {
                "type": "string"
              },
              "GenericConfiguration": {
                "type": "object",
                "description": "Do not use/set. For internal use. Holds additional properties in future extensions."
              }
            }
          }
        }
      },
      "AgentConfig": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agentConfigs"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "_rev": {
                "type": "string",
                "description": "Value used to ensure updates to this object are handled in order."
              },
              "agentId": {
                "type": "string"
              },
              "dataGateway": {
                "$ref": "#/components/schemas/dataGatewayConfig"
              },
              "reporting": {
                "$ref": "#/components/schemas/reporting"
              },
              "reflector": {
                "$ref": "#/components/schemas/agentReflectors"
              },
              "metadata": {
                "$ref": "#/components/schemas/AgentMetadata"
              },
              "identification": {
                "$ref": "#/components/schemas/AgentConfigIdentification"
              },
              "AgentConfiguration": {
                "type": "object",
                "description": "Do not use/set. For internal use. Holds additional properties in future extensions."
              }
            }
          }
        }
      },
      "AgentMetadata": {
        "description": "Dictionary of key value string pairs. \nExample: \n  \"metaKey1\": \"metaValue1\", \n  \"metaKey2\": \"metaValue2\"\n",
        "type": "object"
      },
      "AgentSession": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "agentSessions"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "_rev": {
                "type": "string",
                "description": "Value used to ensure updates to this object are handled in order."
              },
              "agentId": {
                "type": "string"
              },
              "session": {
                "$ref": "#/components/schemas/session"
              }
            }
          }
        }
      },
      "AgentCommandResponse": {
        "type": "object",
        "properties": {
          "requestId": {
            "$ref": "#/components/schemas/requestId"
          },
          "results": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sessionId"
            }
          }
        }
      },
      "AgentSessionListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentSession"
            }
          }
        }
      },
      "AgentSessionResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentSession"
          }
        }
      },
      "AgentSessionCreateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to create an agent session",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agentSessions"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "agentId": {
                    "type": "string"
                  },
                  "session": {
                    "$ref": "#/components/schemas/session"
                  }
                }
              }
            }
          }
        }
      },
      "AgentSessionUpdateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to update an existing agent session",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agentSessions"
                ]
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "_rev": {
                    "type": "string",
                    "description": "Value used to ensure updates to this object are handled in order."
                  },
                  "agentId": {
                    "type": "string"
                  },
                  "session": {
                    "$ref": "#/components/schemas/session"
                  }
                }
              }
            }
          }
        }
      },
      "AgentSessionListCreateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to bulk create sessions",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "agentSessionLists"
                ]
              },
              "attributes": {
                "type": "object",
                "required": [
                  "agentId",
                  "sessionlist"
                ],
                "properties": {
                  "agentId": {
                    "type": "string"
                  },
                  "sessionlist": {
                    "$ref": "#/components/schemas/sessions"
                  }
                }
              }
            }
          }
        }
      },
      "SessionStatusResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "sessionStatuses"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/sessionStatus"
              }
            }
          }
        }
      },
      "ScheduleStatusResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "scheduleStatuses"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/scheduleStatus"
              }
            }
          }
        }
      },
      "AgentScheduleUsageListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/scheduleUsage"
            }
          }
        }
      },
      "AgentSessionStatusListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/sessionStatus"
            }
          }
        }
      },
      "ReflectorStatusResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "reflectorStatuses"
                ]
              },
              "attributes": {
                "$ref": "#/components/schemas/reflectorStatus"
              }
            }
          }
        }
      },
      "MetadataSearchResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "agentConfigurations": {
                "$ref": "#/components/schemas/AgentConfigListResponse"
              },
              "agents": {
                "$ref": "#/components/schemas/AgentListResponse"
              },
              "agentSessions": {
                "$ref": "#/components/schemas/AgentSessionListResponse"
              }
            }
          }
        }
      },
      "ExtensionSchema": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "description": "Extension schema to be merged with main schema.",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "extensionSchemas"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "required": [
              "enable",
              "name",
              "schema"
            ],
            "properties": {
              "_rev": {
                "type": "string",
                "description": "Value used to ensure updates to this object are handled in order."
              },
              "schemaId": {
                "type": "string"
              },
              "enable": {
                "type": "boolean",
                "description": "Toggle for if this schema is merged and used, or not. true means used.",
                "default": false
              },
              "name": {
                "type": "string",
                "description": "The name of the schema"
              },
              "desc": {
                "type": "string",
                "description": "A description of the schema"
              },
              "schema": {
                "type": "object",
                "description": "The extension schema"
              }
            }
          }
        }
      },
      "ExtensionSchemaUpdateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to update an existing extension schema",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "extensionSchemas"
                ]
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "_rev": {
                    "type": "string",
                    "description": "Value used to ensure updates to this object are handled in order."
                  },
                  "schemaId": {
                    "type": "string"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Toggle for if this schema is merged and used, or not. true means used.",
                    "default": false
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the schema"
                  },
                  "desc": {
                    "type": "string",
                    "description": "A description of the schema"
                  },
                  "schema": {
                    "type": "object",
                    "description": "The extension schema"
                  }
                }
              }
            }
          }
        }
      },
      "ExtensionSchemaCreateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to create an extension schema",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "extensionSchemas"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "schemaId": {
                    "type": "string"
                  },
                  "enable": {
                    "type": "boolean",
                    "description": "Toggle for if this schema is merged and used, or not. true means used.",
                    "default": false
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the schema"
                  },
                  "desc": {
                    "type": "string",
                    "description": "A description of the schema"
                  },
                  "schema": {
                    "type": "object",
                    "description": "The extension schema"
                  }
                }
              }
            }
          }
        }
      },
      "ExtensionSchemaResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ExtensionSchema"
          }
        }
      },
      "ExtensionSchemaListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ExtensionSchema"
            }
          }
        }
      },
      "RunningSchemaResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object"
          }
        }
      },
      "AgentSchedule": {
        "type": "object",
        "required": [
          "type",
          "id",
          "attributes"
        ],
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "schedules"
            ]
          },
          "id": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "properties": {
              "_rev": {
                "type": "string",
                "description": "Value used to ensure updates to this object are handled in order."
              },
              "schedule": {
                "$ref": "#/components/schemas/schedule"
              }
            }
          }
        }
      },
      "AgentScheduleListResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AgentSchedule"
            }
          }
        }
      },
      "AgentScheduleResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/AgentSchedule"
          }
        }
      },
      "AgentScheduleCreateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to create a schedule",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "schedules"
                ]
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "schedule": {
                    "$ref": "#/components/schemas/schedule"
                  }
                }
              }
            }
          }
        }
      },
      "AgentScheduleUpdateRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Object used to update an existing agent session",
        "properties": {
          "data": {
            "type": "object",
            "required": [
              "type",
              "id",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string",
                "enum": [
                  "schedules"
                ]
              },
              "id": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "_rev": {
                    "type": "string",
                    "description": "Value used to ensure updates to this object are handled in order."
                  },
                  "schedule": {
                    "$ref": "#/components/schemas/schedule"
                  }
                }
              }
            }
          }
        }
      },
      "ScheduleStatusAggregate": {
        "type": "object",
        "required": [
          "attributes"
        ],
        "description": "Aggregate status",
        "properties": {
          "attributes": {
            "type": "object",
            "required": [
              "sessions"
            ],
            "properties": {
              "sessions": {
                "type": "integer",
                "description": "number of scheduled sessions"
              },
              "scheduleCount": {
                "type": "integer",
                "description": "number of scheduled events"
              },
              "startQueueCount": {
                "type": "integer",
                "description": "number of session starts being queued instead of session started"
              },
              "startDropCount": {
                "type": "integer",
                "description": "number of session drop events"
              },
              "startCount": {
                "type": "integer",
                "description": "number of session start events"
              },
              "startFailCount": {
                "type": "integer",
                "description": "number of session start failures"
              },
              "isScheduledCount": {
                "type": "integer",
                "description": "number of sessions that are scheduled once ore more"
              },
              "isStartQueueCount": {
                "type": "integer",
                "description": "number of sessions being queued instead of started"
              },
              "isStartCount": {
                "type": "integer",
                "description": "number of sessions that are started once ore more"
              },
              "isStartDropCount": {
                "type": "integer",
                "description": "number of sessions that start dropped once ore more"
              },
              "isStartFailCount": {
                "type": "integer",
                "description": "number of sessions that start failed once ore more"
              }
            }
          }
        }
      },
      "ScheduleStatusAggregateResponse": {
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/ScheduleStatusAggregate"
          }
        }
      },
      "dataGatewayConfig": {
        "description": "Configuration elements for the data gateway.",
        "type": "object",
        "properties": {
          "server": {
            "type": "string",
            "description": "IP or FQDN for the data broker to connect to."
          },
          "port": {
            "type": "number",
            "default": 55888,
            "minimum": 1,
            "maximum": 65535,
            "description": "The data broker connection port."
          },
          "dataBrokerUseSsl": {
            "type": "boolean",
            "description": "Enable secure connection."
          },
          "dataBrokerSslAllowSelfsigned": {
            "type": "boolean",
            "description": "Allow self signed certificates on the secure connection."
          },
          "dataBrokerSslAllowInsecureCerts": {
            "type": "boolean",
            "description": "Allow insecure certificates to be used for the secure connection."
          },
          "dataBrokerSslAllowExpiredCerts": {
            "type": "boolean",
            "description": "Allow the use of expired certificates on secure connections."
          },
          "dataBrokerSslSkipHostnameCheck": {
            "type": "boolean",
            "description": "Skip hostname/Common Name check on secure connection."
          },
          "compressionEnable": {
            "type": "boolean",
            "default": true,
            "description": "Enable/disable the per message compression on the data connection."
          },
          "pdgMetricsEnable": {
            "type": "boolean",
            "default": false,
            "description": "ENGINEERING ONLY Send internal performance data metrics."
          },
          "brokerATO": {
            "type": "number",
            "default": 5,
            "minimum": 1,
            "description": "ENGINEERING ONLY Set the ack timeout value in seconds. To disable please use AGENT_PDG_ACK_ENABLE=false."
          },
          "brokerATOMaxCount": {
            "type": "number",
            "default": 2,
            "minimum": 1,
            "description": "ENGINEERING ONLY Set the maximum number of ack timeouts before disconnect."
          }
        }
      },
      "reporting": {
        "description": "agent common report configuration",
        "type": "object",
        "properties": {
          "syncResults": {
            "type": "boolean",
            "description": "If true, sessions report intervals are synchronized independent of their start time. I.e if 60 second interval all the sessions are reported every full minute.",
            "default": false
          }
        }
      },
      "reflectorId": {
        "type": "string",
        "format": "uuid",
        "description": "Reflector identifier (per reflector port).",
        "example": "f422344c-1b97-4bd4-8073-773fc592e9e2"
      },
      "reflectorName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64,
        "description": "User-friendly name (per reflector port), default generated by the agent",
        "example": "myTwampSession, Ottawa-to-Kanata"
      },
      "reflectorType": {
        "type": "string",
        "enum": [
          "twampIpv4",
          "twampIpv6",
          "echoUdpIpv4",
          "echoUdpIpv6",
          "echoIcmpIpv4",
          "echoIcmpIpv6",
          "throughput"
        ],
        "description": "Reflector type TWAMP IPv4/6 or Echo UDP IPv4/6. Echo ICMP IPv4/6 is deprecated.",
        "example": "twampIpv4"
      },
      "namespace": {
        "type": "string",
        "description": "Name of the namespace/VRF to use for performance measurements."
      },
      "reflector": {
        "description": "Throughput, TWAMP and Echo UDP reflectors",
        "required": [
          "reflectorType",
          "enable"
        ],
        "type": "object",
        "properties": {
          "reflectorId": {
            "$ref": "#/components/schemas/reflectorId"
          },
          "reflectorName": {
            "$ref": "#/components/schemas/reflectorName"
          },
          "reflectorType": {
            "$ref": "#/components/schemas/reflectorType"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "enable": {
            "type": "boolean"
          },
          "reflectorPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "description": "Reflector port number, TWAMP default 862 and Echo UDP default 7; throughput default 5201",
            "example": 862
          }
        }
      },
      "agentReflectors": {
        "description": "Performance monitoring agent reflector configuration",
        "type": "object",
        "properties": {
          "reflectors": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/reflector"
            }
          }
        }
      },
      "requestId": {
        "type": "string",
        "format": "uuid",
        "description": "Unique identifier of a request.",
        "example": "f422344c-1b97-4bd4-8073-773fc592e9e2"
      },
      "command": {
        "type": "string",
        "enum": [
          "start",
          "stop",
          "techsupport",
          "identification"
        ]
      },
      "commandType": {
        "type": "string",
        "enum": [
          "throughput",
          "baseline",
          "generate",
          "clean",
          "request"
        ],
        "description": "Type of test to run. This field is specific to each service.",
        "example": "baseline"
      },
      "sessionId": {
        "type": "string",
        "minLength": 1,
        "maxLength": 128,
        "format": "sessid",
        "description": "Session identifier. Pattern [a-zA-Z0-9][a-zA-Z0-9\\-._]*",
        "example": "f422344c-1b97-4bd4-8073-773fc592e9e2"
      },
      "sessionType": {
        "type": "string",
        "enum": [
          "tcp-throughput",
          "twamp-stateful",
          "twamp-stateless",
          "echo-udp",
          "echo-icmp",
          "path-trace",
          "transfer"
        ],
        "description": "Type of session or test"
      },
      "throughput": {
        "description": "RFC 6349 TCP throughput test session configuration",
        "type": "object",
        "properties": {
          "testMode": {
            "type": "string",
            "enum": [
              "client",
              "server"
            ],
            "default": "client",
            "description": "In server mode the agent is listening for a connection on the port testServerPort. The agent ignores all other parameters in server mode."
          },
          "testServerAddress": {
            "type": "string",
            "description": "IP address of the test server.",
            "example": "13.0.0.9"
          },
          "testServerPort": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "default": 5201,
            "description": "IP port of the test server"
          },
          "testReverse": {
            "type": "boolean",
            "default": false,
            "description": "False means TCP traffic from agent-to-server."
          },
          "testDurationSecs": {
            "type": "integer",
            "minimum": 1,
            "maximum": 86400,
            "default": 60,
            "description": "Duration in seconds for the throughput test. testDurationSecs is ignored by the baseline test."
          },
          "testReportIntervalSecs": {
            "type": "number",
            "example": 1.5,
            "minimum": 1,
            "maximum": 60,
            "default": 1,
            "description": "Throughput test metrics reporting interval in seconds. testReportIntervalSecs is ignored by the baseline test."
          },
          "testParallel": {
            "type": "integer",
            "minimum": 1,
            "maximum": 128,
            "default": 1,
            "description": "The number of simultaneous connections to make to the server."
          },
          "testDscp": {
            "type": "integer",
            "minimum": 0,
            "maximum": 63,
            "default": 0,
            "description": "The Differentiated Services Code Point values in the IP header."
          },
          "testTracerouteDestPort": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535,
            "default": 33434,
            "description": "Destination IP port of the tracetroute probe. Usually, testTracerouteDestPort = testServerPort."
          },
          "networkMaxRateBitsPerSec": {
            "type": "integer",
            "minimum": 0,
            "default": 0,
            "example": 280000000,
            "description": "Maximum rate in bits-per-second in baseline and throughput test phase. Zero means unbound."
          },
          "networkMtuBytes": {
            "type": "integer",
            "minimum": 0,
            "maximum": 9000,
            "example": 1500,
            "description": "Maximum Transmission Unit in bytes. This parameter is required by the throughput test. This parameter can be omitted or set to zero before running the baseline test to request for discovery."
          },
          "networkBottleneckBandwidthBitsPerSec": {
            "type": "integer",
            "minimum": 0,
            "example": 250000000,
            "description": "TCP bottleneck bandwidth in bits-per-second. This parameter is required by the throughput test. This parameter can be omitted or set to zero before running the baseline test to request for discovery."
          },
          "networkRttMs": {
            "type": "number",
            "minimum": 0,
            "example": 0.44,
            "description": "Round-trip time in milliseconds. This parameter is required by the throughput test. This parameter can be omitted or set to zero before running the baseline test to request for discovery."
          }
        }
      },
      "override": {
        "type": "object",
        "required": [
          "sessionType"
        ],
        "properties": {
          "sessionType": {
            "$ref": "#/components/schemas/sessionType"
          },
          "throughput": {
            "$ref": "#/components/schemas/throughput"
          }
        }
      },
      "sessionName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64,
        "description": "User-friendly session name, default generated by the agent",
        "example": "myTwampSession, Ottawa-to-Kanata"
      },
      "period": {
        "type": "string",
        "description": "once, to run a finite duration test. continuous, to run the test continuously (e.g. TWAMP). repeat, to repeat the finite duration test indefinitely (e.g. throughput)",
        "enum": [
          "continuous",
          "once",
          "repeat"
        ]
      },
      "interface": {
        "type": "string",
        "description": "Name of the network interface to use for performance measurements."
      },
      "roundTripMode": {
        "description": "Roundtrip measurement mode",
        "type": "object",
        "properties": {
          "enable": {
            "type": "boolean",
            "default": false,
            "example": true
          },
          "reflectorLatencySubtraction": {
            "type": "boolean",
            "default": true,
            "example": true,
            "description": "Roundtrip measurement reflector internal propagation delay optionally substracted from measured time"
          }
        }
      },
      "twamp": {
        "description": "TWAMP performance monitoring session configuration",
        "required": [
          "reflectorAddr"
        ],
        "type": "object",
        "properties": {
          "senderAddr": {
            "type": "string",
            "description": "TWAMP sender IPv4, IPv6 address or FQDN, defaults to Docker IP address",
            "example": "8.8.8.8"
          },
          "senderPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "description": "TWAMP sender port number, default generated by agent",
            "example": 15000
          },
          "senderPayloadSize": {
            "type": "integer",
            "format": "int32",
            "minimum": 41,
            "maximum": 1472,
            "description": "TWAMP payload size in bytes, default 82",
            "example": 82
          },
          "senderRate": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "description": "TWAMP packet rate in PPS, default 10",
            "example": 10
          },
          "senderDscp": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 63,
            "description": "TWAMP sender DSCP value, default 0 (CS0)",
            "example": 32
          },
          "senderTtl": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 255,
            "description": "TWAMP sender TTL value, default 255",
            "example": 255
          },
          "senderVprio": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 7,
            "description": "TWAMP sender VLAN prio, default 0",
            "example": 0
          },
          "reflectorAddr": {
            "type": "string",
            "description": "TWAMP reflector IPv4, IPv6 address or FQDN",
            "example": "8.8.8.8"
          },
          "reflectorPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "description": "TWAMP reflector port number, default 862",
            "example": 862
          },
          "reportInterval": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 900,
            "description": "Reporting interval in seconds, default 30",
            "example": 30
          },
          "controlSenderAddr": {
            "type": "string",
            "description": "TWAMP host source address (public NAT address) in TWAMP control info. IPv4 or IPv6 address",
            "example": "8.8.8.8"
          },
          "controlAddr": {
            "type": "string",
            "description": "TWAMP control server IPv4, IPv6 address or FQDN",
            "example": "8.8.8.8"
          },
          "controlPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "description": "TWAMP control server port number, default 862",
            "example": 862
          },
          "controlDscp": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 63,
            "description": "TWAMP control connection DSCP value, default 0 (CS0)",
            "example": 0
          },
          "controlVprio": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 7,
            "description": "TWAMP control connection VLAN prio, default 0",
            "example": 0
          },
          "controlLegacy": {
            "type": "boolean",
            "description": "TWAMP control legacy mode, default false",
            "example": false
          },
          "roundTripMode": {
            "$ref": "#/components/schemas/roundTripMode"
          },
          "mosBpl": {
            "type": "number",
            "description": "MOS UDPBpl packet loss factor, default 25.1 (G.711 codec)",
            "example": 25.1
          },
          "mosImpairment": {
            "type": "number",
            "description": "MOS UDPimpairmentValue, default 35.8 (G7.11 codec)",
            "example": 35.8
          }
        }
      },
      "echo": {
        "description": "Echo performance monitoring session configuration",
        "required": [
          "reflectorAddr"
        ],
        "type": "object",
        "properties": {
          "senderAddr": {
            "type": "string",
            "description": "Echo sender IPv4 address or FQDN, defaults to Docker IP address",
            "example": "8.8.8.8"
          },
          "senderPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "description": "Echo UDP sender port number, default generated by agent",
            "example": 15000
          },
          "senderPayloadSize": {
            "type": "integer",
            "format": "int32",
            "minimum": 20,
            "maximum": 1472,
            "description": "Echo payload size in bytes, default 82",
            "example": 82
          },
          "senderRate": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 1000,
            "description": "Echo packet rate in PPS, default 10",
            "example": 10
          },
          "senderDscp": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 63,
            "description": "Echo sender DSCP value, default 0 (CS0)",
            "example": 32
          },
          "senderTtl": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 255,
            "description": "Echo sender TTL value, default 255",
            "example": 255
          },
          "senderVprio": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 7,
            "description": "Echo sender VLAN prio, default 0",
            "example": 0
          },
          "reflectorAddr": {
            "type": "string",
            "description": "Echo reflector IPv4 address or FQDN",
            "example": "8.8.8.8"
          },
          "reflectorPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "description": "Echo UDP reflector port number, default 7",
            "example": 7
          },
          "reportInterval": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 900,
            "description": "Reporting interval in seconds, default 30",
            "example": 30
          },
          "mosBpl": {
            "type": "number",
            "description": "MOS UDPBpl packet loss factor, default 25.1 (G.711 codec)",
            "example": 25.1
          },
          "mosImpairment": {
            "type": "number",
            "description": "MOS UDPimpairmentValue, default 35.8 (G7.11 codec)",
            "example": 35.8
          }
        }
      },
      "traceAlgorithm": {
        "type": "string",
        "enum": [
          "paris-traceroute"
        ],
        "description": "Trace algoritm",
        "example": "paris-traceroute"
      },
      "traceType": {
        "type": "string",
        "enum": [
          "udp",
          "icmp",
          "tcp"
        ],
        "default": "udp",
        "description": "Trace type",
        "example": "udp"
      },
      "trace": {
        "description": "Trace session configuration",
        "required": [
          "destination"
        ],
        "type": "object",
        "properties": {
          "destination": {
            "type": "string",
            "description": "Trace IPv4 address, IPv6 address or FQDN",
            "example": "8.8.8.8"
          },
          "destinationPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "default": 33457,
            "description": "Destination port number",
            "example": 33457
          },
          "senderPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "default": 33456,
            "description": "sender port number",
            "example": 33456
          },
          "ipVersion": {
            "type": "string",
            "description": "Version of IP. By default, the agent automatically detects the IP version.",
            "enum": [
              "IPv4",
              "IPv6"
            ]
          },
          "algorithm": {
            "$ref": "#/components/schemas/traceAlgorithm"
          },
          "type": {
            "$ref": "#/components/schemas/traceType"
          },
          "probingRate": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 99,
            "default": 10,
            "description": "probing rate. Probes per second"
          },
          "senderTtlMin": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 255,
            "default": 1,
            "description": "Start the first probe from this TTL instead of 1"
          },
          "senderTtlMax": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 255,
            "default": 30,
            "description": "Set the max number of hops to be reached"
          },
          "senderDscp": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "maximum": 63,
            "default": 0,
            "description": "DSCP value used by the IP probes, value 0 means CS0"
          },
          "probesPerHop": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 255,
            "default": 3,
            "description": "number of probes sent per hop"
          },
          "maxUndiscovered": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 255,
            "default": 3,
            "description": "maximum number of consecutive unresponsive hops causing test abort"
          },
          "waitSec": {
            "type": "number",
            "minimum": 0,
            "default": 5,
            "description": "number of seconds to wait for a probe response"
          },
          "testDurationSec": {
            "type": "number",
            "minimum": 0,
            "default": 180,
            "description": "timeout in seconds of the measurement (pass 0 to set it to infinity)",
            "example": 60
          }
        }
      },
      "ipVersion": {
        "type": "string",
        "enum": [
          "IPv4",
          "IPv6"
        ],
        "description": "IP version",
        "example": "IPv4"
      },
      "transfer": {
        "description": "Transfer session configuration",
        "required": [
          "destinationUrl"
        ],
        "type": "object",
        "properties": {
          "destinationUrl": {
            "type": "string",
            "description": "URL with IPv4 address, IPv6 address or FQDN  port number and path",
            "example": "https://this.ismy.domain:1234/path/to"
          },
          "username": {
            "type": "string",
            "description": "http(s) basic auth user name",
            "example": "user"
          },
          "password": {
            "type": "string",
            "description": "http(s) basic auth password",
            "example": "foobar"
          },
          "useProxy": {
            "type": "boolean",
            "example": true
          },
          "proxyDestination": {
            "type": "string",
            "description": "IPv4 address, IPv6 address or FQDN of http(s) proxy",
            "example": "8.8.8.8"
          },
          "proxyPort": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "maximum": 65535,
            "default": 33457,
            "description": "Proxy destination port number",
            "example": 33457
          },
          "proxyUsername": {
            "type": "string",
            "description": "http(s) proxy auth user name",
            "example": "proxyuser"
          },
          "proxyPass": {
            "type": "string",
            "description": "http(s) proxy auth password",
            "example": "foobar"
          },
          "nameServer": {
            "type": "string",
            "description": "IPv4 address, IPv6 address of name server optionally override system default",
            "example": "8.8.8.8"
          },
          "forceIpVersion": {
            "$ref": "#/components/schemas/ipVersion",
            "description": "Version of IP. By default, the agent automatically detects the IP version."
          },
          "maximumTestConnectSec": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "default": 20,
            "description": "timeout in seconds of the measurement connection (pass 0 to set it to infinity)",
            "example": 60
          },
          "maximumTestDurationSec": {
            "type": "integer",
            "format": "int32",
            "minimum": 0,
            "default": 180,
            "description": "timeout in seconds of the measurement (pass 0 to set it to infinity)",
            "example": 60
          },
          "testInterval": {
            "type": "integer",
            "format": "int32",
            "minimum": 1,
            "default": 60,
            "description": "period repeat interval in seconds",
            "example": 60
          }
        }
      },
      "SessionMetadata": {
        "description": "Dictionary of key value string pairs. \nExample: \n  \"metaKey1\": \"metaValue1\", \n  \"metaKey2\": \"metaValue2\"\n",
        "type": "object"
      },
      "scheduleId": {
        "type": "string",
        "format": "uuid",
        "description": "Schedule Id",
        "example": "f422344c-1b97-4bd4-8073-773fc592e9e2"
      },
      "session": {
        "description": "configuration of a session.",
        "type": "object",
        "required": [
          "sessionName",
          "sessionType",
          "period",
          "enable"
        ],
        "properties": {
          "sessionName": {
            "$ref": "#/components/schemas/sessionName"
          },
          "sessionId": {
            "$ref": "#/components/schemas/sessionId"
          },
          "sessionType": {
            "$ref": "#/components/schemas/sessionType"
          },
          "enable": {
            "type": "boolean"
          },
          "period": {
            "$ref": "#/components/schemas/period"
          },
          "interface": {
            "$ref": "#/components/schemas/interface"
          },
          "namespace": {
            "$ref": "#/components/schemas/namespace"
          },
          "twamp": {
            "$ref": "#/components/schemas/twamp"
          },
          "echo": {
            "$ref": "#/components/schemas/echo"
          },
          "throughput": {
            "$ref": "#/components/schemas/throughput"
          },
          "trace": {
            "$ref": "#/components/schemas/trace"
          },
          "transfer": {
            "$ref": "#/components/schemas/transfer"
          },
          "metadata": {
            "$ref": "#/components/schemas/SessionMetadata"
          },
          "scheduleReference": {
            "$ref": "#/components/schemas/scheduleId"
          },
          "SessionConfiguration": {
            "type": "object",
            "description": "Do not use/set. For internal use. Holds additional properties in future extensions."
          }
        }
      },
      "sessions": {
        "description": "agent sessions",
        "type": "object",
        "properties": {
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/session"
            }
          }
        }
      },
      "runId": {
        "type": "string",
        "format": "uuid",
        "description": "Run instance identifier.",
        "example": "f422344c-1b97-4bd4-8073-773fc592e9e2"
      },
      "status": {
        "type": "string",
        "enum": [
          "waiting",
          "running",
          "stopped",
          "error",
          "pending"
        ],
        "description": "Status of a running test or session."
      },
      "statusMessage": {
        "type": "string",
        "description": "Optional field with supplementation information.",
        "example": "Unable to connect."
      },
      "captureTime": {
        "description": "The time at which the data is captured. RFC 3339, section 5.6, for example, 2017-07-21T17:32:28Z",
        "type": "string"
      },
      "sessionStatus": {
        "description": "Status of a session.",
        "type": "object",
        "required": [
          "sessionId",
          "status"
        ],
        "properties": {
          "sessionId": {
            "$ref": "#/components/schemas/sessionId"
          },
          "runId": {
            "$ref": "#/components/schemas/runId"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "statusMessage": {
            "$ref": "#/components/schemas/statusMessage"
          },
          "captureTime": {
            "$ref": "#/components/schemas/captureTime"
          }
        }
      },
      "agentId": {
        "type": "string",
        "format": "uuid",
        "description": "Agent identifier.",
        "example": "32b28bd7-f3cf-42d3-8396-9d1f7fae61c9"
      },
      "reflectorStatus": {
        "description": "Status of a reflector (per reflector port).",
        "type": "object",
        "required": [
          "reflectorId",
          "status"
        ],
        "properties": {
          "agentId": {
            "$ref": "#/components/schemas/agentId"
          },
          "reflectorId": {
            "$ref": "#/components/schemas/reflectorId"
          },
          "status": {
            "$ref": "#/components/schemas/status"
          },
          "statusMessage": {
            "$ref": "#/components/schemas/statusMessage"
          },
          "lastUpdateTime": {
            "$ref": "#/components/schemas/captureTime"
          }
        }
      },
      "scheduleName": {
        "type": "string",
        "minLength": 1,
        "maxLength": 64,
        "description": "User-friendly schedule name",
        "example": "everyFiveMinuteSchedule"
      },
      "schedule": {
        "description": "configuration of a schedule.",
        "type": "object",
        "required": [
          "scheduleName"
        ],
        "properties": {
          "scheduleName": {
            "$ref": "#/components/schemas/scheduleName"
          },
          "scheduleId": {
            "$ref": "#/components/schemas/scheduleId"
          },
          "single": {
            "type": "boolean",
            "description": "true if the schedule is single (executed one time on the dateTime) or false if it is periodic according to the interval cron specification",
            "example": false,
            "default": false
          },
          "interval": {
            "type": "string",
            "description": "cron expression\n* \"*/5 * * * *  \" every five minutes\n* \"  5 * * * *  \" every five minutes past the hour \n* \"  0 1 * * *  \" every day at 01:00\n* \"  0 1 * * 6,0\" saturday and sunday at 01:00\n",
            "example": "*/5 * * * *"
          },
          "dateTime": {
            "description": "start time for a single schedule. Date-time notation as defined by RFC 3339",
            "example": "2023-07-21T17:32:28Z",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "scheduleUsage": {
        "description": "Schedule usage.",
        "type": "object",
        "required": [
          "schedule",
          "sessionCount"
        ],
        "properties": {
          "schedule": {
            "$ref": "#/components/schemas/schedule"
          },
          "sessionCount": {
            "type": "integer",
            "minimum": 0,
            "description": "number of sessions referencing the schedule."
          },
          "nextTrig": {
            "description": "next time that the schedule will trig start of associated sessions.",
            "example": "2023-07-21T17:32:28Z",
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "scheduleStatus": {
        "description": "Scheduled session status.",
        "type": "object",
        "required": [
          "sessionId",
          "scheduleReference"
        ],
        "properties": {
          "sessionId": {
            "$ref": "#/components/schemas/sessionId"
          },
          "scheduleReference": {
            "$ref": "#/components/schemas/scheduleId"
          },
          "scheduleCount": {
            "type": "integer",
            "minimum": 0,
            "description": "number of scheduled events."
          },
          "startCount": {
            "type": "integer",
            "minimum": 0,
            "description": "number of session starts."
          },
          "startFailCount": {
            "type": "integer",
            "minimum": 0,
            "description": "number of session start failures."
          },
          "startQueueCount": {
            "type": "integer",
            "minimum": 0,
            "description": "number of session starts being queued instead of started, queued job is retried 1 time only."
          },
          "startDropCount": {
            "type": "integer",
            "minimum": 0,
            "description": "number of queued starts that has been dropped."
          },
          "captureTime": {
            "$ref": "#/components/schemas/captureTime"
          }
        }
      }
    }
  }
}